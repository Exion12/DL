#Import packages
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
from sklearn.metrics import classification_report
import numpy as np

# Load and preprocess the data
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

# Build the model
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation="relu"),
    keras.layers.Dense(10, activation="softmax")  # 10 neurons for 10 classes
])

# Compile the model
model.compile(optimizer="sgd", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

# Train the model
history_model = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10)

# Make predictions on the test set with batch_size=128
predictions = model.predict(x_test, batch_size=128)
print(predictions)

# Convert predictions to class labels
predicted_classes = np.argmax(predictions, axis=1)

# Classification report
print("Classification Report:\n", classification_report(y_test, predicted_classes, target_names=[str(x) for x in range(10)]))

# Plot training and validation accuracy
plt.plot(history_model.history["accuracy"], label="Train Accuracy")
plt.plot(history_model.history["val_accuracy"], label="Validation Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend(loc="upper left")
plt.title("Training and Validation Accuracy over Epochs")
plt.show()

# Plot training and validation loss
plt.plot(history_model.history["loss"], label="Train Loss")
plt.plot(history_model.history["val_loss"], label="Validation Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend(loc="upper right")
plt.title("Training and Validation Loss over Epochs")
plt.show()